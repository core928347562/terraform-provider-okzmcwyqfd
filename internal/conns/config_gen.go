// Code generated by internal/generate/clientconfig/main.go; DO NOT EDIT.
package conns

import (
	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
	s3control_sdkv2 "github.com/aws/aws-sdk-go-v2/service/s3control"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3control"
	"github.com/aws/aws-sdk-go/service/s3outposts"
	"github.com/hashicorp/terraform-provider-aws/names"
)

// sdkv1Conns initializes AWS SDK for Go v1 clients.
func (c *Config) sdkv1Conns(client *AWSClient, sess *session.Session) {
	client.S3ControlConn = s3control.New(sess.Copy(&aws.Config{Endpoint: aws.String(c.Endpoints[names.S3Control])}))
	client.S3OutpostsConn = s3outposts.New(sess.Copy(&aws.Config{Endpoint: aws.String(c.Endpoints[names.S3Outposts])}))
}

// sdkv2Conns initializes AWS SDK for Go v2 clients.
func (c *Config) sdkv2Conns(client *AWSClient, cfg aws_sdkv2.Config) {
}

// sdkv2LazyConns initializes AWS SDK for Go v2 lazy-load clients.
func (c *Config) sdkv2LazyConns(client *AWSClient, cfg aws_sdkv2.Config) {
	client.s3controlClient.init(&cfg, func() *s3control_sdkv2.Client {
		return s3control_sdkv2.NewFromConfig(cfg, func(o *s3control_sdkv2.Options) {
			if endpoint := c.Endpoints[names.S3Control]; endpoint != "" {
				o.EndpointResolver = s3control_sdkv2.EndpointResolverFromURL(endpoint)
			}
		})
	})
}
